<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on Backend-заметки</title>
    <link>https://rsimkin.github.io/tags/book/</link>
    <description>Recent content in Book on Backend-заметки</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <managingEditor>r.s.simkin@yandex.ru (Симкин Роман)</managingEditor>
    <webMaster>r.s.simkin@yandex.ru (Симкин Роман)</webMaster>
    <lastBuildDate>Sun, 03 Mar 2019 20:26:51 +0300</lastBuildDate>
    
	<atom:link href="https://rsimkin.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Программист-прагматик</title>
      <link>https://rsimkin.github.io/post/the-pragmatic-programmer/</link>
      <pubDate>Sun, 03 Mar 2019 20:26:51 +0300</pubDate>
      <author>r.s.simkin@yandex.ru (Симкин Роман)</author>
      <guid>https://rsimkin.github.io/post/the-pragmatic-programmer/</guid>
      <description>Введение В данной статье я хочу поделиться основными мыслями, которые я почерпнул из книги &amp;ldquo;Программист прагматик&amp;rdquo; (авторы Эндрю Хант, Дэвид Томас).
Книга помогла мне ответить на ряд немых внутренних вопросов, на которые раньше я не мог дать себе ответа, а также выделила и структурировала в вопросы то, что раньше самостоятельно формализовать не получалось.
Прагматическая философия  для несостоятельных или трудных задач следует предлагать варианты решения и не варианты отговорок одноразовое допущение беспорядка порождает глобальный процесс ухудшения качества кода и приложения в целом (&amp;ldquo;теория разбитого окна&amp;rdquo;) масштабные изменения следует предлагать небольшими шагами, вовлекая узкий круг лиц нужно следить за общей картиной проекта, чтобы не пропустить вялотекущих, но деструктивных изменений (&amp;ldquo;вареная лягушка&amp;rdquo;) решение в пользу качества почти всегда наиболее приоритетно портфель собственных знаний - важная инвестиционная составляющая профессии, требует регулярного пересмотра и реинвестирования чтобы получить ответ, вопрос нужно сформулировать максимально четко и прозрачно нужно учитывать способ и канал коммуникации, формировать стиль сообщения и общения так, чтобы это было удобно собеседнику и отвечало тематике темы общения  Прагматичный подход  принцип DRY является принципиально-важным, как непосредственно в кодовой базе, так и при хранении данных важна ортогональноть модулей программы (слабое зацепление, сильная связность) в проектировании следует учитывать, что не существует окончательных решений, прототип программы поможет выявить скрытые проблемы и получить обратную связь от заказчика, а также стать базой для итогового релиза программирование ближе к предметной области повышает качество кода и улучшает поддержку если это уместно, то можно реализовать встроенный интерпретатор для языка доменов, с которым буде работать приложение; тем самым код программы будет разделен на поддержку интерпетатора, а бизнес-логика останется скриптуемой и легко-изменяемой.</description>
    </item>
    
  </channel>
</rss>